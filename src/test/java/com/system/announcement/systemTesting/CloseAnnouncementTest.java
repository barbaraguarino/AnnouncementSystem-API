// Generated by Selenium IDE
package com.system.announcement.systemTesting;

import org.junit.Test;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import java.time.Duration;

public class CloseAnnouncementTest extends LoginTest {


  public void setUp() {
    super.setUp(); // Chama o método setUp da classe pai (LoginTest)
    login("tatiana.costa@id.uff.br", "senha123"); // Login before close announcement test
  }

  @After
  public void tearDown() {
    super.tearDown();
  }

  @Test
  // Test will close the first announcement in "My announcements" list
  public void closeannouncement() {
    // Test name: close-announcement
    // Step # | name | target | value
    // 1 | open | / |
    driver.get("http://localhost:5173/");
    // 2 | click | linkText=Meus anúncios |
    driver.findElement(By.linkText("Meus anúncios")).click();
    // 3 | click | css=.grid-cols-1:nth-child(1) |
    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
    WebElement announcement = wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".grid-cols-1:nth-child(1)")));
    announcement.click();
    // 5 | click | css=.text-gray-600 |
    WebDriverWait wait2 = new WebDriverWait(driver, Duration.ofSeconds(10));
    WebElement button = wait2.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("div.text-gray-600")));
    button.click();
    // 6 | assertConfirmation | Tem certeza que deseja fechar este anúncio? |
    assertThat(driver.switchTo().alert().getText(), is("Tem certeza que deseja fechar este anúncio?"));
    // 7 | webdriverChooseOkOnVisibleConfirmation | 
    driver.switchTo().alert().accept();
  }
}
